/// <summary>
/// Realized by Carp Alberto Daniel
/// 20-06-2018
/// </summary>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tema_RazboiElectronic_CarpAlbertoDaniel
{
    class ApplicationContext
    {
        /// <summary>
        /// 
        /// </summary>
        Dictionary<String,Boolean> HashTable = new Dictionary<String, Boolean>();
        /// <summary>
        /// List of commands to be tested
        /// </summary>
        private List<ICommand> commands;

        /// <summary>
        /// Construct the application context object with the commands
        /// </summary>
        public ApplicationContext()
        {
            this.commands = new List<ICommand>();

            /// Add the SQL injection command
            this.commands.Add(new SqlInjectionCommand());
            this.commands.Add(new OSCommandInjection());
            this.commands.Add(new LocalFileInclusionCommand());

        }
        /// <summary>
        /// Run all the commands
        /// </summary>
        public void Run(string url,String PHPSessId = null)
        {

            HttpGenericWebRequest.InjectPHPSession(PHPSessId);

            foreach ( var command in commands){

                // Run URL parameters detection
                RunLinks(command, url);
                // Test the form  

                var dictionaryForm = HtmlParser.ParseFormNodes(url);

                foreach (var item in dictionaryForm)
                {
                    List<StatusOperation> errors = null;
                    if (item.Method.ToUpper() == "GET")
                    {
                        errors = command.ExecuteGetCommand(item.Action, item.Dictionary);
                    }
                    else
                    {
                        errors = command.ExecutePostCommand(item.Action, item.Dictionary);
                    }
                    foreach (var error in errors)
                    {
                        if (HashTable.ContainsKey(error.Message) == false)
                        {
                            error.PrintIfErrors();
                            HashTable[error.Message] = true;
                        }
                    }
                        
                }

                // Gets the internal links
                var dictionaryLinkes = HtmlParser.ParseLinkElements(url);

                //Iterate over all uris and call recursivelly the run method
                foreach (var item in dictionaryLinkes)
                {
                    //Recursively Call the run Method
                    if(new Uri(item).AbsoluteUri != url)
                         RunLinks(command, new Uri(item).AbsoluteUri);
                }
            }
        }

        /// <summary>
        /// Executes just the link detection method
        /// </summary>
        /// <param name=""></param>
        public void RunLinks(ICommand command,String url)
        {
            String elm = null; ;
            var dictionary = HtmlParser.ParseUrl(url, out elm);

            foreach (var item in dictionary)
            {

                var Param = item.Key + "=" + item.Value;

                string TestUrl = url.Replace(Param, Param + command.GetFilteredUrl());

                var errors = command.ExecuteGetCommand(TestUrl, null, elm, item.Key);

                foreach (var error in errors)
                {
                    if (HashTable.ContainsKey(error.Message) == false)
                    {
                        error.PrintIfErrors();
                        HashTable[error.Message] = true;
                    }
                }
            }
        }
    }
}
