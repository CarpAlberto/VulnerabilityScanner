/// <summary>
/// Realized by Carp Alberto Daniel
/// 20-06-2018
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace Tema_RazboiElectronic_CarpAlbertoDaniel
{
    /// <summary>
    /// Generic class for http request
    /// </summary>
    class HttpGenericWebRequest
    {

        static private String DEFAULT_PHP_SESSION = "8b86174886f05675e39463ca272b629f";

        static private String PhpSession;
        /// <summary>
        /// Internal http request object
        /// </summary>
        protected HttpWebRequest httpWebRequestInstance;

        /// <summary>
        /// Perform a generic get request to the given URL and retrieves the response
        /// </summary>
        /// <param name="url"></param>
        public string doGet(string url)
        {
            Uri newUrl = new Uri(url);
            // Create the url
            httpWebRequestInstance = (HttpWebRequest) WebRequest.Create(url);
            // Add the cookies
            WrapCookies(newUrl);
            // Gets teh response from server
            var StreamRespoonse = httpWebRequestInstance.GetResponse();
            // Returns the response from server
            return (new StreamReader(StreamRespoonse.GetResponseStream())).ReadToEnd();

        }

        public string doPost(string url, Dictionary<string,string> Params)
        {
            Uri newUrl = new Uri(url);
            StringBuilder Content = new StringBuilder();
            // Create the url
            httpWebRequestInstance = (HttpWebRequest)WebRequest.Create(url);
            // Add the cookies
            WrapCookies(newUrl);

            // Set the content type and method
            httpWebRequestInstance.ContentType = "application/x-www-form-urlencoded";
            httpWebRequestInstance.Method = "POST";

            // Encode the URL parameters
            foreach ( var item in Params)
            {
                Content.Append(item.Key + "=" + item.Value + "&");
            }
            // Remove the last &
            Content.Remove(Content.Length - 1, 1);

            /// Write the stream
            httpWebRequestInstance.GetRequestStream().Write(Encoding.ASCII.GetBytes(Content.ToString()), 0, Content.Length);

            // Get the response
            var StreamRespoonse = httpWebRequestInstance.GetResponse();

            return (new StreamReader(StreamRespoonse.GetResponseStream())).ReadToEnd();
        }

        public HttpGenericWebRequest()
        {

        }

        /// <summary>
        /// Wrap the cookies
        /// </summary>
        private void WrapCookies(Uri uri)
        {
            httpWebRequestInstance.CookieContainer = new CookieContainer();

            // Crfeate the cookies
            Cookie SecurityCookie = new Cookie("security", "low")
            {
                Domain = uri.Host,

            };
            Cookie PhpCookie = new Cookie("PHPSESSID", PhpSession)
            {
                Domain = uri.Host,

            };

            // Add the cookies
            httpWebRequestInstance.CookieContainer.Add(SecurityCookie);
            httpWebRequestInstance.CookieContainer.Add(PhpCookie);
        }

        public static void InjectPHPSession(String phpSession)
        {
            if (phpSession != null)
                PhpSession = phpSession;
            else
                PhpSession = DEFAULT_PHP_SESSION;
        }
    }
}
